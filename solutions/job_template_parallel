#!/bin/bash

#SBATCH -J jobname              # Job name
#SBATCH -o job.%j.out         # Name of stdout output file (%j expands to jobId)
#SBATCH -p normal             # To use the normal queue. There is also a queue called test
#SBATCH -N 1                  # Total number of nodes requested
#SBATCH -n 1                  # Total number of mpi tasks requested
#SBATCH -t 00:05:00           # Run time (hh:mm:ss) - here 5 minutes



#eg: 
module purge
module load  python/3.9.12-nxrltcs  py-numpy/1.19.5-4wflrs2  py-packaging/21.3-hyqp3am py-matplotlib/3.5.3-k3xfyzm
module load parallel

#load your virtual environement
# eg: conda activate my_python_env

# For convenience, You can run a few commands. 
# It helps de debug. 

echo "batch script in:"
pwd

echo "Date /time is :"
date

ls -ltr

# then run your applciation. Two examples below. First using python, then using R.
Niter=10

EXE=/home/vdrach/HPC_training/training_automatisation/simulation_ex.py

Ncore_per_node=32
Nstart=1

SRCDIR=/home/vdrach/HPC_training/training_automatisation/data_preprocessed
rm commands.sh
for i in `seq ${Nstart} 1  $((Nstart+Ncore_per_node-1))`
    do
    SRCFILE=`ls ${SRCDIR}/${i}_*.jpg`
    if [ $? -eq 0 ]; then
        TMP=`basename  ${SRCFILE} .jpg`
        id=`echo ${TMP} | cut -d'_' -f1`
        N=`echo ${TMP} | cut -d'_' -f2`
        M=`echo ${TMP} | cut -d'_' -f3`
    
        OUTFILE=`echo $(pwd)/${id}_${N}_${M}_out.jpg`
        echo "python ${EXE} ${SRCFILE} ${N} ${M} ${Niter} ${OUTFILE}" >> commands.sh
    fi
done

parallel  < commands.sh



